# accept a list of values, and another value n, then return a new list with every value multiplied by n.
def mul_by_n(lst, n):
    print("Inputs: ", lst, n)
    result = [ x * n for x in lst ]
    print("Result: ", result)
    return result

# Given a point in a Euclidean plane (x and y), return the quadrant the point exists in: 1, 2, 3 or 4 (integer).
def quadrant(x, y):
    if x >= 0:
        if y >= 0:
            return 1
        else: return 4
    elif x<0:
        if y < 0:
            return 3
        else: return 2

# Given a month as an integer from 1 to 12, return to which quarter of the year it belongs as an integer number.
def quarter_of(month):
    if month in range(1, 4):
        return 1
    elif month in range(4, 7):
        return 2
    elif month in range(7, 10):
        return 3
    elif month in range(10, 13):
        return 4

# Given 2 elevators (named "left" and "right") in a building with 3 floors (numbered 0 to 2), write a function elevator accepting 3 arguments (in order): left, right, call
def elevator(left, right, call):
    return "left" if abs(call - left) < abs(call - right) else "right"

# Create a function finalGrade, which calculates the final grade of a student depending on two parameters: a grade for the exam and a number of completed projects.
def final_grade(exam, projects):
  if exam > 90 or  projects > 10: return 100
  if exam > 75 and projects >= 5: return 90
  if exam > 50 and projects >= 2: return 75
  return 0

# Write a function feast that takes the animal's name and dish as arguments and returns true or false to indicate whether the beast is allowed to bring the dish to the feast.
def feast(beast, dish):
    return beast[0]==dish[0] and dish[-1]==beast[-1]

# Given a year, return the century it is in.
def century(year):
    return (year + 99) // 100

# get the sum of two arrays
def array_plus_array(arr1,arr2):
    return sum(arr1+arr2)

# Build a function that returns an array of integers from n to 1 where n>0.
def reverseseq(n):
    return list(range(n, 0, -1))


# Given two strings comprised of + and -, return a new string which shows how the two strings interact

def neutralise(s1, s2):
    result = []
    for i in range(len(s1)):
        if s1[i] == "+" and s2[i] == "+":
            result.append("+")
        elif s1[i] == "-" and s2[i] == "-":
            result.append("-")
        elif s1[i] == "-" and s2[i] == "+":
            result.append("0")
        elif s1[i] == "+" and s2[i] == "-":
            result.append("0")
    return ''.join(result)

# Given a string of arbitrary length with any ascii characters. Write a function to determine whether the string contains the whole word "English".

def sp_eng(s): 
    s = s.lower()
    if 'english' in s:
        return True
    else:
        return False


# Given two arrays of integers m and n, test if they contain at least one identical element. Return true if they do; false if not.

def duplicate_elements(m, n):
    for x in a:
        if x in b:
            return True
        else:
            return False


def evens_and_odds(n):
    return hex(n)[2:] if n % 2 else bin(n)[2:]


def convert_palindromes(numbers):
    return [1 if int(str(n)[::-1]) == n else 0 for n in numbers]


def reverse_and_mirror(s1, s2):
    reverse_s2 = s2.swapcase()[::-1]
    separator = '@@@'
    reverse_s1 = f'{s1.swapcase()[::-1]}{s1.swapcase()}'
    result = f'{reverse_s2}{separator}{reverse_s1}'
    return result


def is_ruby_coming(lst): 
    return any(x["language"] == "Ruby" for x in lst)


def countWins(winnerList, country):
    count = 0
    for season in winnerList:
        if season['country'] == country:
            count += 1
    return count


def dont_give_me_five(start,end):
    lst = list(range(start, end + 1))
    result = []
    for n in lst:
        if '5' not in str(n):
            result.append(n)
    return len(result)


def equalize(arr):
    result = []
    for i in range(len(arr)):
        x = arr[i] - arr[0]
        if x >= 0:
            result.append('+' + str(x))
        else:
            result.append(str(x))
    return result


def double_every_other(lst):
    result = []
    for i in range(len(lst)):
        if i % 2 == 0:
            result.append(lst[i])
        else:
            result.append(lst[i]*2)
    return result


def sort_my_string(s):
    even = []
    odd = []
    for i in range(len(s)):
        if i % 2:
            odd.append(s[i])
        else:
            even.append(s[i])
    return ''.join(even) + ' ' + ''.join(odd)


def product(s):
    e_count = s.count('!')
    q_count = s.count('?')
    return e_count * q_count


def remove(str):
    e_count = str.count('!')
    str_del = str.replace('!', '')
    result = str_del + ('!' * e_count)
    return result


def remove(s):
    s = s.split(' ')
    result = []
    for word in s:
        if word.count('!') != 1:
            result.append(word)
    return ' '.join(result)


def even_or_odd(s):
    digits = [int(x) for x in s]
    even = sum(n for n in digits if n % 2 == 0)
    odd = sum(n for n in digits if n % 2 == 1)
    if even > odd:
        return "Even is greater than Odd"
    if odd > even:
        return "Odd is greater than Even"
    if odd == even:
        return "Even and Odd are the same"

def find_short(s):
    result = [len(word) for word in s.split(' ')]
    return min(result)


def find_digit(num, nth):
    if len(str(num)) < nth:
        return 0
    else:
        return [int(n) for n in str(num)[::-1][nth - 1]][0] if nth > 0 else -1


def find_missing_numbers(arr):
    if not arr:
        return []
    lst = list(range(arr[0], arr[-1] + 1))
    return [x for x in lst if x not in arr]


def spoonerize(words):
    word_1, word_2 = words.split()[0], words.split()[1]
    return f'{word_2[0]}{word_1[1:]} {word_1[0]}{word_2[1:]}'


def validate_word(word):
    counter = {letter: word.count(letter) for letter in word.lower()}
    return len(set(counter.values())) == 1


def most_frequent_item_count(collection):
    return max([collection.count(x) for x in collection]) if collection else 0


def make_string(s):
    return ''.join([word[0] for word in s.split()])


import re

def sum_of_integers_in_string(s):
    return sum(int(x) for x in re.findall(r'\d+', s))


def time_convert(num):
    hh = num // 60
    mm = num % 60
    if len(str(mm)) == 1:
        mm = f'0{mm}'
    if len(str(hh)) == 1:
        hh = f'0{hh}'
    return f'{hh}:{mm}' if num > 0 else '00:00'


def even_numbers_before_fixed(sequence, fixed):
    if fixed not in sequence:
        return -1
    return len([x for x in sequence[: sequence.index(fixed)] if x % 2 == 0])


def min_min_max(arr):
    x = min(arr)
    z = max(arr)
    y = min([n for n in range(x, z) if n not in arr])
    return [x, y, z]


def incrementer(nums):
    return [(x + i) % 10 for i, x in enumerate(nums, 1)]


def alpha_seq(strng):
    alphabet = '_abcdefghijklmnopqrstuvwxyz'
    strng = sorted(strng.lower())
    return ','.join([(letter * alphabet.index(letter)).capitalize() for letter in strng])


def sum_of_differences(arr):
    arr = sorted(arr, reverse=True)
    result = []
    for i in range(1, len(arr)):
        x = abs(arr[i-1] - arr[i])
        result.append(x)
    return sum(result) if len(result) >= 1 else 0


def first_non_consecutive(arr):
    result = []
    for i in range(len(arr) - 1):
        if arr[i] + 1 != arr[i+1]:
            result.append(arr[i+1])
            return result[0]


def position(letter):
    alpha = '_abcdefghijklmnopqrstuvwxyz'
    return f"Position of alphabet: {alpha.index(letter)}"


import math
def square_or_square_root(arr):
    result = []
    for i in range(len(arr)):
        if math.sqrt(arr[i]).is_integer():
            result.append(math.sqrt(arr[i]))
        else:
            result.append((arr[i]) * (arr[i]))
    return result


import re

def validate_code(code):
    if re.search(r'^[1-3]', str(code)):
        return True
    else:
        return False


import re

def lowercase_count(str):
    return len(re.findall(r'[a-z]', str))


def solution(number):
    lst = list(range(1, number))
    result = []
    for n in lst:
        if n % 3 == 0 or n % 5 == 0:
            result.append(n)
    return sum(set(result))

