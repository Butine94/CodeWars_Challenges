# Given two integers a and x, return the minimum non-negative number to add to / subtract from a to make it a multiple of x.

def minimum(a, x):
    return min(a % x, abs((a % x) - x))


# Given a list of integers, find the positive difference between each consecutive pair of numbers, and put this into a new list of differences. Then, find the differences between consecutive pairs in this new list, and repeat until the list has a length of 1. Then, return the single value.

def differences(lst):
    i = 0
    res = []
    for i in range(len(lst)):
        while i < len(lst) - 1:
            x = abs(lst[i] - lst[i+1])
            i += 1
            res.append(x)
        if len(res) == 1:
            break
    return res[0]


# Given 3 lists of the same length like these: products: ["Computer", "Cell Phones", "Vacuum Cleaner"] amounts: [3, 24, 8] prices: [199, 299, 399] return the three product names with the highest revenue (amount * price).

def top3(products, amounts, prices):
    res = []
    for i in range(len(products)):
        x = amounts[i] * prices[i]
        res.append(x)
    merged = sorted(zip(res, products), reverse=True)
    return [x[1] for x in merged[0:3]] 


# Given an array (or list or vector) of arrays (or, guess what, lists or vectors) of integers, your goal is to return the sum of a specific set of numbers, starting with elements whose position is equal to the main array length and going down by one at each step.

def elements_sum(arr):
    j = len(arr)
    res = []
    for i in range(len(arr)):
        x = arr[i][j - 1]
        i += 1
        j -= 1
        res.append(x)
    return sum(res)


# Given an array/list [] of n integers , find maximum triplet sum in the array Without duplications.

def max_tri_sum(numbers):
    numbers = set(numbers)
    numbers = sorted(numbers, reverse=True)
    return sum(numbers[:3])


# Given an array with exactly 5 strings "a", "b" or "c", check if the array contains three and two of the same values.

def check_three_and_two(arr):
    count_a = arr.count('a')
    count_b = arr.count('b')
    count_c = arr.count('c')

    if (count_a == 3 and (count_b == 2 or count_c == 2)) or (count_b == 3 and (count_a == 2 or count_c == 2)) or (count_c == 3 and (count_a == 2 or count_b == 2)):
        return True
    else:
        return False


# You get a list of integers. Return a new list by adding each consecutive pair of the list.

def make_new_list(arr):
    return [x + y for x, y in zip(arr, arr[1:])]


# Determine if any of the numbers in the array is the index of the "odd" word. If so, return true, otherwise false.

def odd_ball(arr):
    odd_index = arr.index('odd')
    if odd_index in arr:
        return True
    else:
        return False


# An element is leader if it is greater than The Sum all the elements to its right side.

def array_leaders(numbers):
    res = []
    for i in range(len(numbers)):
        if numbers[i] > sum(numbers[i+1:]):
            x = numbers[i]
            res.append(numbers[i])
    return res


# A Tidy number is a number whose digits are in non-decreasing order.

def tidyNumber(n):
    n = str(n)
    if ''.join(sorted(n)) == n:
        return True
    else:
        return False


# Extra perfect number is the number that first and last bits are set bits.

def extra_perfect(n):
    return [a for a in range(1, n+1) if a % 2 == 1 and a <= n]


# Given an array/list [] of integers , Find The maximum difference between the successive elements in its sorted form.

def max_gap(numbers):
    numbers = sorted(numbers)
    res = []
    for i in range(len(numbers) - 1):
        x = abs(numbers[i] - numbers[i+1])
        res.append(x)
    return max(res)


# write a function that takes an input string of lowercase letters and returns true/false depending on whether the string is in alphabetical order or not.

def alphabetic(s):
    if s == ''.join(sorted(s)):
        return True
    else:
        return False


def odd_ones_out(numbers):
    res = []
    for x in numbers:
        if numbers.count(x) % 2 == 0:
            res.append(x)
    return res


# Your task is very simple. Given an input string s, case_sensitive(s), check whether all letters are lowercase or not. Return True/False and a list of all the entries that are not lowercase in order of their appearance in s.

def case_sensitive(s):
    if s == s.islower():
        return [True, []]
    else:
        res = []
        for letter in s:
            if letter.isupper():
                res.append(letter)
        if res:
            return [False, res]
        else:
            return [True, []]


# You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.

def find_page_number(pages):
    res = []
    for number in range(len(pages) - 1):
        if (pages[number] != pages[number + 1]) or (pages[number] != pages[number + 1] - 1):
            res.append(pages[number])
    return res


# Given a sequence of integers, return the sum of all the integers that have an even index, multiplied by the integer at the last index. Indices in sequence start from 0.

def even_last(numbers):
    if numbers == []:
        return 0
    
    last_integer = numbers[-1]
    even = []
    for i in range(len(numbers)):
        if i % 2 == 0:
            even.append(numbers[i])
    return sum(even) * last_integer


# Return an array/list where Even numbers come first then odds. Even numbers in ascending order While odds in descending.

def men_from_boys(arr):
    odd = []
    even = []
    for num in arr:
        if num % 2 == 0:
            odd.append(num)
        if num % 2 == 1:
            even.append(num)
    even = sorted(set(even), reverse=True)
    odd = sorted(set(odd))
    result = odd + even
    return result


# You are to write a function that takes a string as its first parameter. This string will be a string of words. You are expected to then use the second parameter, to find the corresponding word in the given string. The first word would be represented by 0. Once you have the located string you are finally going to multiply by it the third provided parameter. You are additionally required to add a hyphen in between each word.

def modify_multiply(st, loc, num):
    st = st.split()
    word = st[loc]
    result = (word + "-") * num
    return result[:-1]


# Based on the 3 values you have to return a string, that describes which operation was used to get the given result.

def calc_type(a, b, res):
    if a + b == res:
        return 'addition'
    if a - b == res:
        return 'subtraction'
    if a * b == res:
        return 'multiplication'
    if a / b == res:
        return 'division'


# Given a list of digits, return the smallest number that could be formed from these digits, using the digits only once (ignore duplicates).

def min_value(digits):
    numbers = []
    for num in digits:
        if num not in numbers:
            numbers.append(num)
    numbers = [str(i) for i in sorted(numbers)]
    numbers = int(''.join(numbers))
    return numbers


# you will be given a string and two indexes (a and b). Your task is to reverse the portion of that string between those two indices inclusive.

def solve(st,a,b):
    st1 = st[a:b+1]
    return st[:a] + st1[::-1] + st[b+1:]


# Given an array/list of integers, find the Nth smallest element in the array.

def nth_smallest(arr, pos):
    arr = sorted(arr)
    return arr[pos - 1]


# Given an array of numbers, return a new array of length number containing the last even numbers from the original array (in the same order).

def even_numbers(arr,n):
    arr = reversed(arr)
    even = [x for x in arr if x % 2 == 0]
    return even[:n][::-1]


# your task will be to return the count of pairs that have consecutive numbers as follows:

def pairs(arr):
    count = 0
    for num in range(len(arr) - 1):
        if abs(arr[num] - arr[num + 1]) == 1:
            count += 1
    return count


# you will be given a number, two indexes (index1 and index2) and a digit to look for. Your task will be to check if the digit exists in the number, within the indexes given.

def check_digit(number, index1, index2, digit):
    number = [int(x) for x in str(number)]
    portion = number[min(index1, index2): max(index1, index2) + 1]
    if int(digit) in portion:
        return True
    else:
        return False


# A number is a Special Number if itâ€™s digits only consist 0, 1, 2, 3, 4 or 5. Given a number determine if it special number or not .

def special_number(number):
    special_number = [0, 1, 2, 3, 4, 5]
    number = [int(x) for x in str(number)]
    for num in number:
        if num not in special_number:
            return "NOT!!"
    return "Special!!"


# can jump either one or three shelves at a time: from shelf i to shelf i+1 or i+3. Find the minimum number of jumps to go from start to finish

def solution(start, finish):
    distance = finish - start
    if distance % 3 == 0:
        return int(distance / 3)
    if distance % 3 == 1:
        return int(((distance - 1) / 3) + 1)
    if distance % 3 == 2:
        return int(((distance - 2) / 3) + 2)


# write a function that takes a string and a letter as input and then returns the index of the second occurrence of that letter in the string.

def second_symbol(s, symbol):
    if s.count(symbol) >= 2:
        return s.find(symbol, s.find(symbol) + 1)
    else:
        return -1

# Given a string, calculate how many times the words "Sand", "Water", "Fish", and "Sun" appear without overlapping.

def sum_of_a_beach(beach):
    words = ["sand", "water", "fish", "sun"]
    beach = beach.lower().split()
    count = 0
    for word in beach:
        if word in words:
            count += 1
    return count


# given an array of numbers in which two numbers occur once and the rest occur only twice. Your task will be to return the sum of the numbers that occur only once.

def repeats(arr):
    result = []
    for num in arr:
        if arr.count(num) == 1:
            result.append(num)
    return sum(result)


# Given an array of integers and an integer n, find all occurrences of n in the given array and return another array containing all the index positions of n in the given array.

def find_all(array, n):
    result = []
    for index, num in enumerate(array):
        if num == n:
            result.append(index)
    return result


# Remove the duplicates from a list of integers, keeping the last ( rightmost ) occurrence of each element.

def solve(arr): 
    arr = arr[::-1]
    first_occ = []
    for num in arr:
        if num not in first_occ:
            first_occ.append(num)
    return first_occ[::-1]


# Given an array representing a series of floors you must reach by elevator, return an integer representing the total distance travelled for visiting each floor in the array in order.

def elevator_distance(array):
    result = []
    for num in range(len(array) - 1):
        x = abs(array[num] - array[num + 1])
        result.append(x)
    return sum(result)



# Write a function that takes a positive integer n, sums all the cubed values from 1 to n (inclusive), and returns that sum.

def sum_cubes(n):
    result = []
    for num in range(1, n + 1):
        result.append(num**3)
    return sum(result)


# Please write a function that sums a list, but ignores any duplicate items in the list.

def sum_no_duplicates(l):
    result = []
    for num in l:
        if l.count(num) == 1:
            result.append(num)
    return sum(result)


# Complete the function that takes a noun as a string, and returns her preferred band name written as a string.

def band_name_generator(name):
    if name[0] != name[-1]:
        return f"The {name.capitalize()}"
    else:
        return f"{name.capitalize()}{name[1:]}"


# write a function which calculates the value of a word based off the sum of the alphabet positions of its characters.

def words_to_marks(s):
    alphabet = '_abcdefghijklmnopqrstuvwxyz'
    result = 0
    for letter in s:
        result += alphabet.index(letter)
    return result


# An ordered sequence of numbers from 1 to N is given. One number might have deleted from it, then the remaining numbers were mixed. Find the number that was deleted.

def find_deleted_number(arr, mixed_arr):
    sorted_arr = sorted(mixed_arr)
    if sorted_arr == arr:
        return 0
    else:
        for num in arr:
            if num not in sorted_arr:
                return num


# Given an array of strings, "filterEvenLengthWords" returns an array containing only the elements of the given array whose length is an even number.

def filter_even_length_words(words):
    return [word for word in words if len(word) % 2 == 0]


# Given a list of integers, determine whether the sum of its elements is odd or even.

def odd_or_even(arr):
    result = sum(arr)
    return 'Even' if result % 2 == 0 else 'Odd'


# Write a function that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.

def nickname_generator(name):
    if len(name) < 4:
        return "Error: Name too short"
    vowels = 'aeiou'
    if name[2] in vowels:
        return name[:4]
    else:
        return name[:3]


# Write a function that takes a string name as an argument and returns the first 3 or 4 letters as a nickname.

def total_bill(s):
    return (s.count('r') - (s.count('r') // 5)) * 2


# Given an array of integers. Find the minimum sum which is obtained from summing each Two integers product.

def min_sum(arr):
    arr = sorted(arr)
    total = 0
    for num in range(len(arr) // 2):
        total += arr[num] * arr[-num - 1]
    return total


# Given an array of N integers, you have to find how many times you have to add up the smallest numbers in the array until their Sum becomes greater or equal to K.

def minimum_steps(n, k):
    n.sort()
    count = 0
    total = 0
    for num in n:
        total += num
        count += 1
        if total >= k:
            break
    return count - 1


# Create a function that returns the sum of the digits formed from the first and last digits, all the way to the center of the number.

def closing_in_sum(n):
    digits = [int(x) for x in str(n)]
    result = []
    for num in range(len(digits) // 2):
        x = int(str(digits[num]) + str(digits[-1 - num]))
        result.append(x)
    if len(digits) % 2 == 0:
        return sum(result)
    else:
        return sum(result) + digits[(len(digits) // 2)]


# Take each number in the list and square it if it is even, or square root the number if it is odd. Take this new list and return the sum of it, rounded to two decimal places.

import math

def sum_square_even_root_odd(nums):
    result = []
    for num in nums:
        if num % 2 == 0:
            result.append(num * num)
        else:
            result.append(math.sqrt(num))
    return round(sum(result), 2)


# Return the score for this array of answers, giving +4 for each correct answer, -1 for each incorrect answer, and +0 for each blank answer, represented as an empty string

def check_exam(arr1,arr2):
    count = 0
    for i in range(len(arr1)):
        if arr1[i] == arr2[i]:
            count += 4
        elif arr2[i] == "":
            count += 0
        elif arr1[i] != arr2[i]:
            count += -1
    return count if count >= 0 else 0


#  you will be given a string and your task will be to return a list of ints detailing the count of uppercase letters, lowercase, numbers and special characters

def solve(s):
    up = 0
    low = 0
    num = 0
    spec = 0
    for i in range(len(s)):
        if s[i] == s[i].upper() and s[i].isalpha():
            up += 1
        if s[i] == s[i].lower() and s[i].isalpha():
            low += 1
        if s[i].isdigit():
            num += 1
    return [up, low, num, len(s) - (up + low + num)]


# The Ones' Complement of a binary number is the number obtained by swapping all the 0s for 1s and all the 1s for 0s.

def ones_complement(number):
    result = []
    for n in number:
        if n == '1':
            result.append(0)
        elif n == '0':
            result.append(1)
    digits = ''.join(map(str, result))
    return digits


# Given two words and a letter, return a single word that's a combination of both words, merged at the point where the given letter first appears in each word. The returned word should have the beginning of the first word and the ending of the second, with the dividing letter in the middle. You can assume both words will contain the dividing letter.
    
def string_merge(string1, string2, letter):
    letter_1 = string1.find(letter)
    letter_2 = string2.find(letter)
    result = []
    for letter in string1[: letter_1]:
        result.append(letter)
    for letter in string2[letter_2:]:
        result.append(letter)
    return ''.join(map(str, result))


# capitalize the letters that occupy even indexes and odd indexes separately. Index 0 will be considered even. capitalize("abcdef") = ['AbCdEf', 'aBcDeF']

def capitalize(s):
    odd = []
    even = []
    for letter in range(len(s)):
        if letter % 2:
            even.append(s[letter].upper())
        else:
            even.append(s[letter])
    for letter in range(len(s)):
        if letter % 2 == 0:
            odd.append(s[letter].upper())
        else:
            odd.append(s[letter])
    return [''.join(array) for array in [odd, even]]


# Given two integer arrays where the second array is a shuffled duplicate of the first array with one element missing, find the missing element.

def find_missing(arr1, arr2):
    arr1 = sorted(arr1)
    arr2 = sorted(arr2)
    result = []
    for i in range(len(arr1) - 1):
        if arr1[i] != arr2[i]:
            result.append(arr1[i])
    return arr1[-1] if result == [] else result[0]


# Given a list of values, return a list with each value replaced with the empty value of the same type. test.assert_equals(empty_values([None, [None], (None,[None]), {None}, True, 7.0, 7, "None

def empty_values(lst):
    result = []
    for char in lst:
        if char is None:
            result.append(None)
        elif isinstance(char, int):
            result.append(0)
        elif isinstance(char, float):
            result.append(0.0)
        elif isinstance(char, str):
            result.append("")
        elif isinstance(char, bool):
            result.append(False)
        elif isinstance(char, list):
            result.append([])
        elif isinstance(char, tuple):
            result.append(())
        elif isinstance(char, dict):
            result.append({})
        elif isinstance(char, set):
            result.append(set())
    return result


# find the similarity of given sorted arrays a and b

def similarity(a, b):
    c = set(a + b)
    d = [n for n in b if n in a]
    return len(d) / len(c)


# The difference means that either the character is present in one collection or it is present in other, but not in both. Return a sorted list with the difference.

def diff(a, b):
    return sorted(set([x for x in a if x not in b] + [x for x in b if x not in a]))


# remove all consecutive duplicate words from a string, leaving only first words entries. 

def remove_consecutive_duplicates(str):
    first_occ = []
    str = str.split(" ")
    result = []
    for word in range(len(str) - 1):
        if str[word] != str[word+1]:
            result.append(str[word])
    return ' '.join(result + [str[-1]])


# Strong number is the number that the sum of the factorial of its digits is equal to number itself.

import math

def strong_num(number):
    digits = [int(x) for x in str(number)]
    result = []
    for num in digits:
        result.append(math.factorial(num))
    if sum(result) == number:
        return "STRONG!!!!"
    else:
        return "Not Strong !!"

# You are given an array of integers. On each move you are allowed to increase exactly one of its element by one. Find the minimal number of moves required to obtain a strictly increasing sequence from the input.

def array_change(arr):
    count = 0
    for i in range(len(arr) - 1):
        while arr[i+1] <= arr[i]:
            arr[i+1] += 1
            count += 1
            if arr[i+1] > arr[i]:
                break
    return count


# An array is called smooth if its first and its last elements are equal to one another and to the middle. Given an array arr, determine if it is smooth or not.

def is_smooth(arr):
    length = len(arr)
    if length % 2:
        return True if arr[0] == arr[-1] == arr[length // 2] else False
    else:
        return True if arr[0] == arr[-1] == arr[(length // 2) - 1] + arr[length // 2] else False


# Given an array arr, swap its first and last elements and return the resulting array.

def first_reverse_try(arr):
    for i in range(len(arr)):
        arr[i], arr[-i-1] = arr[-i-1], arr[i]
        return arr
    return []


# Complete the function that returns a list of strings: (a) in the reverse order of the original string, and (b) with each successive string starting one character further in from the end of the original string.

def reverse_slice(s):
    s = s[::-1]
    result = []
    for i in range(len(s)):
        result.append(s[i:])
    return result


# Complete the function that takes a sequence of numbers as single parameter. Your function must return the sum of the even values of this sequence.

def sum_even_numbers(seq): 
    even = []
    for n in seq:
        if n % 2 == 0:
            even.append(n)
    return sum(even)


# Create a function that takes a number and returns an array of strings containing the number cut off at each digit.

def create_array_of_tiers(n):
    n = str(n)
    result = []
    for i in range(len(n)):
        result.append(n[:i+1])
    return result


# Create a function that takes an integer argument of seconds and converts the value into a string describing how many hours and minutes comprise that many seconds.

def to_time(seconds):
    return f'{seconds // 3600} hour(s) and {(seconds % 3600) // 60} minute(s)'


# Given a string made of digits [0-9], return a string where each digit is repeated a number of times equals to its value.

def explode(s):
    result = []
    for i in range(len(s)):
        x = int(s[i]) * s[i]
        result.append(x)
    return ''.join(result)


# given an array of objects representing data about developers who have signed up to attend the next coding meetup that you are organising.

def is_same_language(lst): 
    lang = [dev['language'] for dev in lst]
    return True if len(set(lang)) == 1 else False


# Your task is to return an object which includes the count of each coding language represented at the meetup.

def count_languages(lst): 
    lang = [dev['language'] for dev in lst]
    return {x: lang.count(x) for x in lang}


# you must take an input string, reverse the order of the words, and reverse the order of the letters within the words.

def esrever(string):
    string_r = string[:-1].split(' ')
    result = [word[::-1] for word in string_r[::-1]]
    return ' '.join(result) + string[-1] if len(string) > 0 else ''


# Count the number of occurrences of each character and return it as a (list of tuples) in order of appearance.

def ordered_count(inp):
    counter = {letter: inp.count(letter) for letter in inp}
    return list(counter.items())


# Your task is to initialize the middle names (if there is any).

def initialize_names(name):
    name = name.split()
    if len(name) <= 2:
        return ' '.join(name)
    else:
        middle_names = [m[0] + '.' for m in name[1:-1]]
        if len(middle_names) > 1:
            middle = ' '.join(middle_names)
        if len(middle_names) == 1:
            middle = middle_names[0]
        return f'{name[0]} {middle} {name[-1]}'


# Given an Array and an Example-Array to sort to, write a function that sorts the Array following the Example-Array.

def example_sort(arr, example_arr):
    result = []
    for j in range(len(example_arr)):
        for n in arr:
            if example_arr[j] == n:
                result.append(n)
    return result


# Return an array of length 2 with a[0] representing the mean of the ten integers as a floating point number.

def mean(lst):
    digit = [int(x) for x in lst if x.isdigit()]
    char = [x for x in lst if x.isalpha()]
    return [sum(digit) / len(digit), ''.join(char)]


# Given a string as input, move all of its vowels to the end of the string, in the same order as they were before.

def move_vowels(input):
    vowels = 'aeiou'
    return ''.join([x for x in input if x not in vowels] + [x for x in input if x in vowels])


# compare each pair of integers from 2 arrays, and return a new array of large numbers.

def get_larger_numbers(arr1, arr2):
    return [arr1[i] if arr1[i] > arr2[i] else arr2[i] for i in range(len(arr1))]


# You are given a sequence of positive ints where every element appears three times, except one that appears only once (let's call it x) and one that appears only twice (let's call it y). Your task is to find x * x * y.

def missing_values(seq): 
    x = [n for n in seq if seq.count(n) == 1][0]
    y = [n for n in seq if seq.count(n) == 2][0]
    return x * x * y



# You have to create a method "compoundArray" which should take as input two int arrays of different length and return one int array with numbers of both arrays shuffled one by one.

def compound_array(a, b):
    length = abs(len(a) - len(b))
    arr = [(x, y) for x, y in zip(a, b)]
    if len(a) != len(b):
        return [n for tuple in arr for n in tuple] + (a[-length:] if len(a) > len(b) else b[-length:])
    else:
        return [n for tuple in arr for n in tuple]


# determine how many files of the copy queue you will be able to save into your Hard Disk Drive. The files must be saved in the order they appear in the queue.

def save(sizes, hd):
    total = 0
    index = 0
    for i in range(len(sizes)):
        total += sizes[i]
        index += 1
        if total > hd:
            index = index - 1
            break
    return index


def to_camel_case(text):
    words = text.replace('-', '_').split('_')
    return ''.join([words[0]] + [word.capitalize() for word in words[1:]])


def narcissistic(n):
    return n == sum([int(x) ** len(str(n)) for x in str(n)])


def title_case(title, minor_words):
    return ' '.join([title[0].capitalize()] + [word.capitalize() if word not in minor_words.split() else word for word in title.split()[1:]])


def bingo(ticket,win):
    mini_wins = 0
    for mini in ticket:
        for digit in mini[0]:
            if ord(digit) == mini[1]:
                mini_wins += 1
    if mini_wins >= win:
        return 'Winner!'
    else:
        return 'Loser!'


# A number is called Automorphic number if and only if its square ends in the same digits as the number itself.

def automorphic(n):
    squared = str(n * n)
    return 'Automorphic' if squared.endswith(str(n)) else 'Not!!'


def solve(s):
    vowels = 'aeiou'
    count = 0
    result = []
    for i in range(len(s)):
        if s[i] in vowels:
            count += 1
        else:
            result.append(count)
            count = 0
    return max(result) if result else 0


def name_value(lst):
    alphabet = '_abcdefghijklmnopqrstuvwxyz'
    values = [sum([alphabet.index(letter) for letter in word.replace(' ', '')]) for word in lst]
    return [value * i for i, value in enumerate(values, 1)]


def largest_sum(s):
    digits = s.split('0')
    return max([sum([int(d) for d in n]) for n in digits])


# For arr1 = ['a', 'a', 'a', 'a', 'a'], arr2 = [2, 4] the function returns ['a', 'a']

def find_array(arr1, arr2):
    return [arr1[n] for n in arr2 if n < len(arr1)]


def multiple_of_index(arr):
    digits = [arr[i] for i in range(1, len(arr)) if arr[i] % i == 0]
    if arr[0] == 0:
        return [0] + digits
    else:
        return digits


def traffic_count(array):
    w = max([array[i] for i in range(len(array) // 4)])
    x = max([array[i] for i in range(6, len(array) // 4 + 6)])
    y = max([array[i] for i in range(12, len(array) // 4 + 12)])
    z = max([array[i] for i in range(18, len(array) // 4 + 18)])
    return [('4:00pm', w), ('5:00pm', x), ('6:00pm', y), ('7:00pm', z)]



def freq_seq(s, sep):
    result = []
    for letter in s:
        counts = s.count(letter)
        result.append(counts)
    return sep.join(map(str, result))


def remove(s):
    splits = s.split()
    return ' '.join([x[: x.index('i') + 1] for x in splits])


def twos_difference(lst):
    lst = sorted(lst)
    result = []
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            if lst[i] + 2 == lst[j]:
                result.append((lst[i], lst[j]))
    return result


def format_words(words):
    if words == [''] or words == [] or words == None:
        return ''
    words = list(filter(lambda x: x.isalpha(), words))
    if len(words) == 1:
        return words[0]
    else:
        return ', '.join(words[:-1]) + ' and ' + words[-1]


def total(arr):
    if len(arr) == 1:
        return arr[0]
    while len(arr) > 1:
        result = []
        for i in range(len(arr) - 1):
            sums = arr[i] + arr[i+1]
            result.append(sums)
        arr = result
    return result[0]


def missing(nums, s):
    nums = sorted(nums)
    s = s.replace(' ', '').lower()
    if max(nums) > len(s) - 1:
        return "No mission today"
    result = [s[x] for x in nums if x < len(s)]
    return ''.join(result)


from collections import Counter

def find_the_missing_tree(trees):
    unbalanced = None
    counts = Counter(trees)
    min_values = min(list(counts.values()))
    for k, v in counts.items():
        if v == min_values:
            return k


from collections import Counter

def balance(arr1, arr2):
    arr1_counter = Counter(arr1)
    arr2_counter = Counter(arr2)
    arr1_values = sorted(arr1_counter.values())
    arr2_values = sorted(arr2_counter.values())
    if arr1_values == arr2_values:
        return True
    else:
        return False


def same(arr_a, arr_b):
    arr__a = sorted([x for sub in arr_a for x in sub])
    arr__b = sorted([x for sub in arr_b for x in sub])
    return arr__a == arr__b


def sort_by_height(a):
    result = []
    digits = sorted([x for x in a if x != -1])
    for n in a:
        if n == -1:
            result.append(-1)
        else:
            result.append(digits.pop(0))
    return result


def remove_smallest(numbers):
    if not numbers:
        return []
    min_indx = numbers.index(min(numbers))
    return numbers[:min_indx] + numbers[min_indx+1:]


class List:
    def remove_(self, integer_list, values_list):
        return [x for x in integer_list if x not in values_list]


def split_in_parts(s, part_length):
    result = []
    for i, char in enumerate(s, 1):
        if i % part_length == 0:
            result.append(f'{char} ')
        else:
            result.append(char)
    return ''.join(result).rstrip()


def nth_char(words):
    return ''.join([words[i][i] for i in range(len(words))])


def matrix(arr):
    for i in range(len(arr[0])):
        for j in range(len(arr[0])):
            if i == j and arr[i][j] < 0:
                arr[i][j] = 0
            elif i == j and arr[i][j] >= 0:
                arr[i][j] = 1
    return arr


def flatten_and_sort(array):
    return sorted([x for sub_arr in array for x in sub_arr])


def sum_nested(lst):
    sum = 0
    for n in lst:
        if isinstance(n, int):
            sum += n
        if isinstance(n, list):
            sum += sum_nested(n)
    return sum


def ones_counter(inp):
    result = []
    count = 0
    for i in range(len(inp)):
        if inp[i] == 1:
            count += 1
        else:
            if count > 0:
                result.append(count)
                count = 0
    if count > 0:
        result.append(count)
    return result


def count_letters_and_digits(s):
    return sum([1 for x in s if x.isalpha() or x.isdigit()])


def repeat_sum(l):
    flat_lst = [x for sub_arr in l for x in sub_arr]
    sums = []
    for x in flat_lst:
        count = 0
        for i in range(len(l)):
            if x in l[i]:
                count += 1
                if count == 2:
                    sums.append(x)


def sortme(words):
    capitalised = [word for word in words if word[0].isupper()]
    words_sorted = sorted(words, key=lambda x: x.lower())
    return words_sorted



    return sum(set(sums))


