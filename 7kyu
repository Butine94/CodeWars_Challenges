# Given two integers a and x, return the minimum non-negative number to add to / subtract from a to make it a multiple of x.

def minimum(a, x):
    return min(a % x, abs((a % x) - x))


# Given a list of integers, find the positive difference between each consecutive pair of numbers, and put this into a new list of differences. Then, find the differences between consecutive pairs in this new list, and repeat until the list has a length of 1. Then, return the single value.

def differences(lst):
    i = 0
    res = []
    for i in range(len(lst)):
        while i < len(lst) - 1:
            x = abs(lst[i] - lst[i+1])
            i += 1
            res.append(x)
        if len(res) == 1:
            break
    return res[0]


# Given 3 lists of the same length like these: products: ["Computer", "Cell Phones", "Vacuum Cleaner"] amounts: [3, 24, 8] prices: [199, 299, 399] return the three product names with the highest revenue (amount * price).

def top3(products, amounts, prices):
    res = []
    for i in range(len(products)):
        x = amounts[i] * prices[i]
        res.append(x)
    merged = sorted(zip(res, products), reverse=True)
    return [x[1] for x in merged[0:3]] 


# Given an array (or list or vector) of arrays (or, guess what, lists or vectors) of integers, your goal is to return the sum of a specific set of numbers, starting with elements whose position is equal to the main array length and going down by one at each step.

def elements_sum(arr):
    j = len(arr)
    res = []
    for i in range(len(arr)):
        x = arr[i][j - 1]
        i += 1
        j -= 1
        res.append(x)
    return sum(res)


# Given an array/list [] of n integers , find maximum triplet sum in the array Without duplications.

def max_tri_sum(numbers):
    numbers = set(numbers)
    numbers = sorted(numbers, reverse=True)
    return sum(numbers[:3])


# Given an array with exactly 5 strings "a", "b" or "c", check if the array contains three and two of the same values.

def check_three_and_two(arr):
    count_a = arr.count('a')
    count_b = arr.count('b')
    count_c = arr.count('c')

    if (count_a == 3 and (count_b == 2 or count_c == 2)) or (count_b == 3 and (count_a == 2 or count_c == 2)) or (count_c == 3 and (count_a == 2 or count_b == 2)):
        return True
    else:
        return False


# You get a list of integers. Return a new list by adding each consecutive pair of the list.

def make_new_list(arr):
    return [x + y for x, y in zip(arr, arr[1:])]


# Determine if any of the numbers in the array is the index of the "odd" word. If so, return true, otherwise false.

def odd_ball(arr):
    odd_index = arr.index('odd')
    if odd_index in arr:
        return True
    else:
        return False


# An element is leader if it is greater than The Sum all the elements to its right side.

def array_leaders(numbers):
    res = []
    for i in range(len(numbers)):
        if numbers[i] > sum(numbers[i+1:]):
            x = numbers[i]
            res.append(numbers[i])
    return res


# A Tidy number is a number whose digits are in non-decreasing order.

def tidyNumber(n):
    n = str(n)
    if ''.join(sorted(n)) == n:
        return True
    else:
        return False


# Extra perfect number is the number that first and last bits are set bits.

def extra_perfect(n):
    return [a for a in range(1, n+1) if a % 2 == 1 and a <= n]


# Given an array/list [] of integers , Find The maximum difference between the successive elements in its sorted form.

def max_gap(numbers):
    numbers = sorted(numbers)
    res = []
    for i in range(len(numbers) - 1):
        x = abs(numbers[i] - numbers[i+1])
        res.append(x)
    return max(res)


# write a function that takes an input string of lowercase letters and returns true/false depending on whether the string is in alphabetical order or not.

def alphabetic(s):
    if s == ''.join(sorted(s)):
        return True
    else:
        return False


def odd_ones_out(numbers):
    res = []
    for x in numbers:
        if numbers.count(x) % 2 == 0:
            res.append(x)
    return res


# Your task is very simple. Given an input string s, case_sensitive(s), check whether all letters are lowercase or not. Return True/False and a list of all the entries that are not lowercase in order of their appearance in s.

def case_sensitive(s):
    if s == s.islower():
        return [True, []]
    else:
        res = []
        for letter in s:
            if letter.isupper():
                res.append(letter)
        if res:
            return [False, res]
        else:
            return [True, []]


# You're supplied with an array of numbers, and should return an array with each page number that is out of place. Incorrect page numbers may appear next to each other. Duplicate incorrect page numbers are possible.

def find_page_number(pages):
    res = []
    for number in range(len(pages) - 1):
        if (pages[number] != pages[number + 1]) or (pages[number] != pages[number + 1] - 1):
            res.append(pages[number])
    return res


# Given a sequence of integers, return the sum of all the integers that have an even index, multiplied by the integer at the last index. Indices in sequence start from 0.

def even_last(numbers):
    if numbers == []:
        return 0
    
    last_integer = numbers[-1]
    even = []
    for i in range(len(numbers)):
        if i % 2 == 0:
            even.append(numbers[i])
    return sum(even) * last_integer


# Return an array/list where Even numbers come first then odds. Even numbers in ascending order While odds in descending.

def men_from_boys(arr):
    odd = []
    even = []
    for num in arr:
        if num % 2 == 0:
            odd.append(num)
        if num % 2 == 1:
            even.append(num)
    even = sorted(set(even), reverse=True)
    odd = sorted(set(odd))
    result = odd + even
    return result


# You are to write a function that takes a string as its first parameter. This string will be a string of words. You are expected to then use the second parameter, to find the corresponding word in the given string. The first word would be represented by 0. Once you have the located string you are finally going to multiply by it the third provided parameter. You are additionally required to add a hyphen in between each word.

def modify_multiply(st, loc, num):
    st = st.split()
    word = st[loc]
    result = (word + "-") * num
    return result[:-1]


# Based on the 3 values you have to return a string, that describes which operation was used to get the given result.

def calc_type(a, b, res):
    if a + b == res:
        return 'addition'
    if a - b == res:
        return 'subtraction'
    if a * b == res:
        return 'multiplication'
    if a / b == res:
        return 'division'


# Given a list of digits, return the smallest number that could be formed from these digits, using the digits only once (ignore duplicates).

def min_value(digits):
    numbers = []
    for num in digits:
        if num not in numbers:
            numbers.append(num)
    numbers = [str(i) for i in sorted(numbers)]
    numbers = int(''.join(numbers))
    return numbers


# you will be given a string and two indexes (a and b). Your task is to reverse the portion of that string between those two indices inclusive.

def solve(st,a,b):
    st1 = st[a:b+1]
    return st[:a] + st1[::-1] + st[b+1:]


# Given an array/list of integers, find the Nth smallest element in the array.

def nth_smallest(arr, pos):
    arr = sorted(arr)
    return arr[pos - 1]


# Given an array of numbers, return a new array of length number containing the last even numbers from the original array (in the same order).

def even_numbers(arr,n):
    arr = reversed(arr)
    even = [x for x in arr if x % 2 == 0]
    return even[:n][::-1]


# your task will be to return the count of pairs that have consecutive numbers as follows:

def pairs(arr):
    count = 0
    for num in range(len(arr) - 1):
        if abs(arr[num] - arr[num + 1]) == 1:
            count += 1
    return count


# you will be given a number, two indexes (index1 and index2) and a digit to look for. Your task will be to check if the digit exists in the number, within the indexes given.

def check_digit(number, index1, index2, digit):
    number = [int(x) for x in str(number)]
    portion = number[min(index1, index2): max(index1, index2) + 1]
    if int(digit) in portion:
        return True
    else:
        return False


# A number is a Special Number if itâ€™s digits only consist 0, 1, 2, 3, 4 or 5. Given a number determine if it special number or not .

def special_number(number):
    special_number = [0, 1, 2, 3, 4, 5]
    number = [int(x) for x in str(number)]
    for num in number:
        if num not in special_number:
            return "NOT!!"
    return "Special!!"


# can jump either one or three shelves at a time: from shelf i to shelf i+1 or i+3. Find the minimum number of jumps to go from start to finish

def solution(start, finish):
    distance = finish - start
    if distance % 3 == 0:
        return int(distance / 3)
    if distance % 3 == 1:
        return int(((distance - 1) / 3) + 1)
    if distance % 3 == 2:
        return int(((distance - 2) / 3) + 2)





